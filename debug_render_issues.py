#!/usr/bin/env python3
"""
Script para diagnosticar problemas espec√≠ficos de Render.com
"""

import os
import sys
import logging
from datetime import datetime

def check_render_configuration():
    """Verificar configuraci√≥n espec√≠fica de Render.com"""
    print("üîç Diagnosticando configuraci√≥n de Render.com...")
    print(f"‚è∞ Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)
    
    # 1. Verificar variables de entorno
    print("1Ô∏è‚É£ Verificando variables de entorno...")
    render_env_vars = [
        'RENDER',
        'RENDER_EXTERNAL_HOSTNAME',
        'RENDER_EXTERNAL_URL',
        'PORT',
        'PYTHON_VERSION'
    ]
    
    for var in render_env_vars:
        value = os.environ.get(var, 'NO DEFINIDA')
        print(f"   {var}: {value}")
    
    # 2. Verificar configuraci√≥n de la aplicaci√≥n
    print("\n2Ô∏è‚É£ Verificando configuraci√≥n de la aplicaci√≥n...")
    
    try:
        # Importar la aplicaci√≥n
        import app
        
        print("   ‚úÖ app.py se importa correctamente")
        
        # Verificar configuraci√≥n de Flask
        print(f"   DEBUG: {app.app.config.get('DEBUG', 'NO DEFINIDO')}")
        print(f"   SECRET_KEY: {'DEFINIDO' if app.app.config.get('SECRET_KEY') else 'NO DEFINIDO'}")
        print(f"   UPLOAD_FOLDER: {app.app.config.get('UPLOAD_FOLDER', 'NO DEFINIDO')}")
        print(f"   DATA_CACHE_FOLDER: {app.app.config.get('DATA_CACHE_FOLDER', 'NO DEFINIDO')}")
        
        # Verificar configuraciones espec√≠ficas de Render
        print(f"   PERMANENT_SESSION_LIFETIME: {app.app.config.get('PERMANENT_SESSION_LIFETIME', 'NO DEFINIDO')}")
        print(f"   SESSION_COOKIE_SECURE: {app.app.config.get('SESSION_COOKIE_SECURE', 'NO DEFINIDO')}")
        print(f"   SESSION_COOKIE_HTTPONLY: {app.app.config.get('SESSION_COOKIE_HTTPONLY', 'NO DEFINIDO')}")
        print(f"   SESSION_COOKIE_SAMESITE: {app.app.config.get('SESSION_COOKIE_SAMESITE', 'NO DEFINIDO')}")
        
    except Exception as e:
        print(f"   ‚ùå Error importando app.py: {e}")
        return False
    
    # 3. Verificar dependencias
    print("\n3Ô∏è‚É£ Verificando dependencias...")
    
    required_packages = [
        'flask',
        'flask_login',
        'flask_sqlalchemy',
        'pandas',
        'numpy',
        'openpyxl',
        'gunicorn',
        'werkzeug'
    ]
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - NO INSTALADO")
    
    # 4. Verificar archivos cr√≠ticos
    print("\n4Ô∏è‚É£ Verificando archivos cr√≠ticos...")
    
    critical_files = [
        'app.py',
        'requirements.txt',
        'render.yaml',
        'data_models.py',
        'calculadora_core.py',
        'file_parser.py',
        'report_generator.py'
    ]
    
    for file in critical_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - NO ENCONTRADO")
    
    # 5. Verificar estructura de carpetas
    print("\n5Ô∏è‚É£ Verificando estructura de carpetas...")
    
    required_folders = [
        'templates',
        'static',
        'static/css',
        'static/js',
        'uploads',
        'data_cache'
    ]
    
    for folder in required_folders:
        if os.path.exists(folder):
            print(f"   ‚úÖ {folder}/")
        else:
            print(f"   ‚ùå {folder}/ - NO ENCONTRADO")
    
    # 6. Verificar permisos de escritura
    print("\n6Ô∏è‚É£ Verificando permisos de escritura...")
    
    writable_folders = [
        'uploads',
        'data_cache',
        'instance'
    ]
    
    for folder in writable_folders:
        if os.path.exists(folder):
            try:
                test_file = os.path.join(folder, 'test_write.tmp')
                with open(test_file, 'w') as f:
                    f.write('test')
                os.remove(test_file)
                print(f"   ‚úÖ {folder}/ - ESCRIBIBLE")
            except Exception as e:
                print(f"   ‚ùå {folder}/ - NO ESCRIBIBLE: {e}")
        else:
            print(f"   ‚ö†Ô∏è  {folder}/ - NO EXISTE")
    
    print("-" * 60)
    print("üìã Recomendaciones para Render.com:")
    print("   1. Verificar logs en Render Dashboard")
    print("   2. Asegurar que todas las dependencias est√©n en requirements.txt")
    print("   3. Verificar que gunicorn est√© configurado correctamente")
    print("   4. Comprobar variables de entorno en Render")
    print("   5. Verificar que la aplicaci√≥n se inicie sin errores")
    
    return True

def check_gunicorn_config():
    """Verificar configuraci√≥n de gunicorn"""
    print("\nüîß Verificando configuraci√≥n de gunicorn...")
    
    try:
        import gunicorn
        print(f"   ‚úÖ Gunicorn instalado: {gunicorn.__version__}")
    except ImportError:
        print("   ‚ùå Gunicorn NO instalado")
        return False
    
    # Verificar que gunicorn pueda importar la aplicaci√≥n
    try:
        import gunicorn.app.wsgiapp
        print("   ‚úÖ Gunicorn puede importar correctamente")
    except Exception as e:
        print(f"   ‚ùå Error con gunicorn: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = check_render_configuration()
    gunicorn_ok = check_gunicorn_config()
    
    if success and gunicorn_ok:
        print("\n‚úÖ Diagn√≥stico completado - Configuraci√≥n parece correcta")
        print("üîç Si la aplicaci√≥n sigue fallando en Render.com:")
        print("   1. Revisar logs espec√≠ficos en Render Dashboard")
        print("   2. Verificar build logs para errores de dependencias")
        print("   3. Comprobar que no haya errores de sintaxis")
    else:
        print("\n‚ùå Se encontraron problemas en la configuraci√≥n")
        print("üîß Corrige los problemas antes de hacer deploy") 