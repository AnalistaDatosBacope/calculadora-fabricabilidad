#!/usr/bin/env python3
"""
Script de diagn√≥stico detallado para problemas de carga de archivos
"""
import requests
import os
import sys
from pathlib import Path
import pandas as pd
import io

def create_test_files():
    """Crear archivos de prueba v√°lidos"""
    
    # Archivo de ventas (formato correcto)
    sales_data = {
        'FECHA': ['2024-01-01', '2024-01-02', '2024-01-03'],
        'COD_PROD': ['A001', 'A002', 'A001'],
        'Descripci√≥n': ['Producto A', 'Producto B', 'Producto A'],
        'VENTA': [100, 150, 120]
    }
    sales_df = pd.DataFrame(sales_data)
    
    # Archivo de proveedores (formato correcto)
    suppliers_data = {
        'Art√≠culo': ['A001', 'A002'],
        'Descripci√≥n': ['Producto A', 'Producto B'],
        'C√≥digo': ['PROV001', 'PROV002'],
        'Raz√≥n Social': ['Proveedor 1', 'Proveedor 2'],
        'Precio': [10.50, 15.75]
    }
    suppliers_df = pd.DataFrame(suppliers_data)
    
    # Archivo hist√≥rico de costos (formato correcto)
    historico_data = {
        'Art√≠culo': ['A001', 'A002'],
        '2023': [10.00, 15.00],
        '2024': [10.50, 15.75]
    }
    historico_df = pd.DataFrame(historico_data)
    
    # Guardar archivos
    sales_df.to_excel('test_sales.xlsx', index=False)
    suppliers_df.to_excel('test_suppliers.xlsx', index=False)
    historico_df.to_excel('test_historico.xlsx', index=False)
    
    print("‚úÖ Archivos de prueba creados:")
    print("   - test_sales.xlsx")
    print("   - test_suppliers.xlsx") 
    print("   - test_historico.xlsx")

def test_file_upload_detailed():
    """Prueba detallada de carga de archivos"""
    
    base_url = "https://calculadora-fabricabilidad.onrender.com"
    session = requests.Session()
    
    print("üîç Iniciando diagn√≥stico detallado...")
    print(f"üåê URL: {base_url}")
    print("-" * 60)
    
    # Paso 1: Login
    print("1Ô∏è‚É£ Realizando login...")
    login_data = {
        'username': 'admin',
        'password': 'admin123'
    }
    
    try:
        response = session.post(f"{base_url}/login", data=login_data, allow_redirects=False)
        if response.status_code == 302:
            print("   ‚úÖ Login exitoso")
            # Seguir redirecci√≥n
            redirect_url = response.headers.get('Location')
            if redirect_url:
                response = session.get(f"{base_url}{redirect_url}")
        else:
            print(f"   ‚ùå Error en login: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error en login: {e}")
        return False
    
    # Paso 2: Crear archivos de prueba
    print("\n2Ô∏è‚É£ Creando archivos de prueba...")
    create_test_files()
    
    # Paso 3: Probar cada tipo de archivo
    print("\n3Ô∏è‚É£ Probando carga de archivos...")
    
    files_to_test = [
        ('sales_file', 'test_sales.xlsx', 'Ventas'),
        ('suppliers_file', 'test_suppliers.xlsx', 'Proveedores'),
        ('historico_costos_file', 'test_historico.xlsx', 'Hist√≥rico de Costos')
    ]
    
    for file_key, filename, description in files_to_test:
        print(f"\n   üìÅ Probando {description}...")
        
        try:
            with open(filename, 'rb') as f:
                files = {file_key: (filename, f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
                
                # Hacer la petici√≥n POST
                response = session.post(base_url, files=files, allow_redirects=False)
                
                print(f"      Status: {response.status_code}")
                print(f"      Content-Type: {response.headers.get('Content-Type', 'N/A')}")
                print(f"      Content-Length: {response.headers.get('Content-Length', 'N/A')}")
                
                if response.status_code == 302:
                    print(f"      ‚úÖ {description} procesado (redirecci√≥n)")
                    # Verificar la p√°gina despu√©s de la redirecci√≥n
                    redirect_url = response.headers.get('Location')
                    if redirect_url:
                        follow_response = session.get(f"{base_url}{redirect_url}")
                        print(f"      Redirecci√≥n a: {redirect_url}")
                        print(f"      Status despu√©s de redirecci√≥n: {follow_response.status_code}")
                        
                        # Buscar indicadores de √©xito en el HTML
                        html_content = follow_response.text
                        if 'Cargado' in html_content:
                            print(f"      ‚úÖ {description} marcado como 'Cargado'")
                        else:
                            print(f"      ‚ö†Ô∏è  {description} no aparece como 'Cargado'")
                            
                        if 'success' in html_content.lower():
                            print(f"      ‚úÖ Mensaje de √©xito encontrado")
                        else:
                            print(f"      ‚ö†Ô∏è  No se encontr√≥ mensaje de √©xito")
                            
                elif response.status_code == 200:
                    print(f"      ‚úÖ {description} procesado (sin redirecci√≥n)")
                    # Buscar indicadores de √©xito
                    html_content = response.text
                    if 'Cargado' in html_content:
                        print(f"      ‚úÖ {description} marcado como 'Cargado'")
                    else:
                        print(f"      ‚ö†Ô∏è  {description} no aparece como 'Cargado'")
                else:
                    print(f"      ‚ùå Error: {response.status_code}")
                    print(f"      Respuesta: {response.text[:500]}...")
                    
        except Exception as e:
            print(f"      ‚ùå Error cargando {description}: {e}")
    
    # Paso 4: Verificar estado final
    print("\n4Ô∏è‚É£ Verificando estado final...")
    try:
        response = session.get(base_url)
        html_content = response.text
        
        # Buscar indicadores de archivos cargados
        indicators = [
            ('bom_status', 'BOM'),
            ('stock_status', 'Stock'),
            ('costs_status', 'Costos'),
            ('sales_status', 'Ventas'),
            ('suppliers_status', 'Proveedores'),
            ('historico_status', 'Hist√≥rico')
        ]
        
        for indicator, name in indicators:
            if indicator in html_content:
                print(f"   ‚úÖ {name}: Encontrado en HTML")
            else:
                print(f"   ‚ùå {name}: No encontrado en HTML")
                
    except Exception as e:
        print(f"   ‚ùå Error verificando estado: {e}")
    
    # Limpiar archivos
    print("\n5Ô∏è‚É£ Limpiando archivos de prueba...")
    for filename in ['test_sales.xlsx', 'test_suppliers.xlsx', 'test_historico.xlsx']:
        if os.path.exists(filename):
            os.remove(filename)
            print(f"   üóëÔ∏è  Eliminado: {filename}")
    
    print("\n‚úÖ Diagn√≥stico completado")

if __name__ == "__main__":
    test_file_upload_detailed() 