#!/usr/bin/env python3
"""
Script de diagn√≥stico espec√≠fico para Render.com
"""
import requests
import os
import sys
from pathlib import Path
import pandas as pd
import json

def test_render_specific():
    """Diagn√≥stico espec√≠fico para problemas en Render.com"""
    
    base_url = "https://calculadora-fabricabilidad.onrender.com"
    session = requests.Session()
    
    print("üîç Diagn√≥stico espec√≠fico para Render.com")
    print(f"üåê URL: {base_url}")
    print("-" * 60)
    
    # Paso 1: Verificar que la aplicaci√≥n responde
    print("1Ô∏è‚É£ Verificando respuesta de la aplicaci√≥n...")
    try:
        response = session.get(base_url)
        print(f"   Status: {response.status_code}")
        if response.status_code == 302:
            print("   ‚úÖ Aplicaci√≥n responde (redirecci√≥n a login)")
        elif response.status_code == 200:
            print("   ‚úÖ Aplicaci√≥n responde directamente")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        return False
    
    # Paso 2: Login
    print("\n2Ô∏è‚É£ Realizando login...")
    login_data = {
        'username': 'admin',
        'password': 'admin123'
    }
    
    try:
        response = session.post(f"{base_url}/login", data=login_data, allow_redirects=False)
        if response.status_code == 302:
            print("   ‚úÖ Login exitoso")
            # Seguir redirecci√≥n
            redirect_url = response.headers.get('Location')
            if redirect_url:
                response = session.get(f"{base_url}{redirect_url}")
                print(f"   Redirecci√≥n a: {redirect_url}")
        else:
            print(f"   ‚ùå Error en login: {response.status_code}")
            print(f"   Respuesta: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"   ‚ùå Error en login: {e}")
        return False
    
    # Paso 3: Verificar cookies de sesi√≥n
    print("\n3Ô∏è‚É£ Verificando cookies de sesi√≥n...")
    cookies = session.cookies
    print(f"   Cookies: {dict(cookies)}")
    
    if 'session' in cookies:
        print("   ‚úÖ Cookie de sesi√≥n presente")
    else:
        print("   ‚ùå Cookie de sesi√≥n no encontrada")
    
    # Paso 4: Crear archivo de prueba simple
    print("\n4Ô∏è‚É£ Creando archivo de prueba simple...")
    
    # Archivo de ventas simple
    sales_data = {
        'FECHA': ['2024-01-01'],
        'COD_PROD': ['A001'],
        'Descripci√≥n': ['Producto A'],
        'VENTA': [100]
    }
    sales_df = pd.DataFrame(sales_data)
    sales_df.to_excel('test_simple.xlsx', index=False)
    print("   ‚úÖ Archivo test_simple.xlsx creado")
    
    # Paso 5: Probar carga de archivo
    print("\n5Ô∏è‚É£ Probando carga de archivo...")
    
    try:
        with open('test_simple.xlsx', 'rb') as f:
            files = {'sales_file': ('test_simple.xlsx', f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
            
            response = session.post(base_url, files=files, allow_redirects=False)
            
            print(f"   Status: {response.status_code}")
            print(f"   Headers: {dict(response.headers)}")
            
            if response.status_code == 302:
                print("   ‚úÖ Archivo procesado (redirecci√≥n)")
                redirect_url = response.headers.get('Location')
                if redirect_url:
                    follow_response = session.get(f"{base_url}{redirect_url}")
                    print(f"   Redirecci√≥n a: {redirect_url}")
                    print(f"   Status despu√©s de redirecci√≥n: {follow_response.status_code}")
                    
                    # Analizar el HTML de respuesta
                    html_content = follow_response.text
                    
                    # Buscar indicadores espec√≠ficos
                    indicators = [
                        ('Cargado', 'Texto "Cargado"'),
                        ('success', 'Mensaje de √©xito'),
                        ('sales_loaded', 'Variable sales_loaded'),
                        ('bom_loaded', 'Variable bom_loaded'),
                        ('stock_loaded', 'Variable stock_loaded'),
                        ('cost_loaded', 'Variable cost_loaded'),
                        ('suppliers_loaded', 'Variable suppliers_loaded'),
                        ('historico_costos_loaded', 'Variable historico_costos_loaded')
                    ]
                    
                    print("\n   üìä An√°lisis del HTML:")
                    for indicator, description in indicators:
                        if indicator in html_content:
                            print(f"      ‚úÖ {description}: Encontrado")
                        else:
                            print(f"      ‚ùå {description}: No encontrado")
                    
                    # Buscar el contexto de la plantilla
                    if 'bom_loaded' in html_content or 'stock_loaded' in html_content:
                        print("   ‚úÖ Variables de estado encontradas en HTML")
                    else:
                        print("   ‚ùå Variables de estado NO encontradas en HTML")
                        
            else:
                print(f"   ‚ùå Error: {response.status_code}")
                print(f"   Respuesta: {response.text[:500]}...")
                
    except Exception as e:
        print(f"   ‚ùå Error cargando archivo: {e}")
    
    # Paso 6: Verificar estado despu√©s de carga
    print("\n6Ô∏è‚É£ Verificando estado despu√©s de carga...")
    try:
        response = session.get(base_url)
        html_content = response.text
        
        # Buscar indicadores de archivos cargados
        indicators = [
            ('bom_status', 'BOM'),
            ('stock_status', 'Stock'),
            ('costs_status', 'Costos'),
            ('sales_status', 'Ventas'),
            ('suppliers_status', 'Proveedores'),
            ('historico_status', 'Hist√≥rico')
        ]
        
        print("   üìä Estado final:")
        for indicator, name in indicators:
            if indicator in html_content:
                print(f"      ‚úÖ {name}: Encontrado en HTML")
            else:
                print(f"      ‚ùå {name}: No encontrado en HTML")
                
    except Exception as e:
        print(f"   ‚ùå Error verificando estado: {e}")
    
    # Limpiar archivo
    if os.path.exists('test_simple.xlsx'):
        os.remove('test_simple.xlsx')
        print("\n   üóëÔ∏è  Archivo de prueba eliminado")
    
    print("\n‚úÖ Diagn√≥stico completado")

if __name__ == "__main__":
    test_render_specific() 